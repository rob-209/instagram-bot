import os
import re
import shutil
import asyncio
import logging
import tempfile
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import MessageNotModified
from dotenv import load_dotenv

import yt_dlp

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TOKEN")
OWNER = os.getenv("OWNER")
DOWNLOAD_DIR = Path(os.getenv("DOWNLOAD_DIR", "/tmp"))
MAX_FILE_MB = int(os.getenv("MAX_FILE_MB", "200"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("ytdlbot")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

URL_RE = re.compile(r"https?://\S+")

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
def human_size(num_bytes: int) -> str:
    step = 1024.0
    units = ["B", "KB", "MB", "GB"]
    size = float(num_bytes)
    for u in units:
        if size < step or u == units[-1]:
            return f"{size:.2f} {u}"
        size /= step
    return f"{size:.2f} GB"

def sanitize(text: str) -> str:
    return re.sub(r"[^\w\s.-]", "", text).strip()[:80] or "file"

def build_ydl_opts(tmpdir: Path, audio_only=False) -> dict:
    outtmpl = str(tmpdir / "%(title).80s.%(ext)s")
    opts = {
        "outtmpl": outtmpl,
        "restrictfilenames": True,
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "ignoreerrors": True,
    }
    if audio_only:
        opts["format"] = "bestaudio/best"
        opts["postprocessors"] = [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }]
    else:
        opts["format"] = "bv*+ba/b"
    return opts

def pick_file_from_dir(d: Path) -> Optional[Path]:
    for p in d.iterdir():
        if p.is_file() and not p.name.endswith(".part"):
            return p
    return None

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
@dp.message_handler(commands=["start", "help"])
async def cmd_help(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å <b>–≤–∏–¥–µ–æ</b> –∏–ª–∏ <b>–∞—É–¥–∏–æ</b> —Å YouTube –∏ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç: üé• –í–∏–¥–µ–æ –∏–ª–∏ üéµ –ê—É–¥–∏–æ\n"
        "3Ô∏è‚É£ –î–æ–∂–¥–∏—Å—å, –ø–æ–∫–∞ —è —Å–∫–∞—á–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–∞–π–ª\n\n"
        f"<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</b> –¥–æ ~{MAX_FILE_MB} –ú–ë"
    )
    await message.reply(text)

@dp.message_handler(regexp=URL_RE.pattern)
async def handle_url(message: types.Message):
    url = URL_RE.search(message.text or "").group(0)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data=f"video|{url}"),
        InlineKeyboardButton("üéµ –ê—É–¥–∏–æ", callback_data=f"audio|{url}")
    )
    await message.reply("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith(("video", "audio")))
async def process_download(call: types.CallbackQuery):
    mode, url = call.data.split("|", 1)
    audio_only = mode == "audio"

    status = await call.message.reply("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é‚Ä¶ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")

    tmpdir = Path(tempfile.mkdtemp(prefix="ytdl_", dir=str(DOWNLOAD_DIR)))
    try:
        ydl_opts = build_ydl_opts(tmpdir, audio_only=audio_only)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)

        file_path = pick_file_from_dir(tmpdir)
        if not file_path or not file_path.exists():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")

        size_mb = file_path.stat().st_size / (1024 * 1024)
        caption = f"{sanitize(file_path.stem)} ‚Äî {human_size(file_path.stat().st_size)}"

        if size_mb > MAX_FILE_MB:
            await status.edit_text(
                f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {human_size(file_path.stat().st_size)}.\n"
                f"–õ–∏–º–∏—Ç ‚Äî {MAX_FILE_MB} MB."
            )
            return

        try:
            if audio_only:
                await call.message.reply_audio(open(file_path, "rb"), caption=caption)
            elif file_path.suffix.lower().lstrip(".") in {"mp4", "mkv", "webm", "mov"}:
                await call.message.reply_video(open(file_path, "rb"), caption=caption)
            else:
                await call.message.reply_document(open(file_path, "rb"), caption=caption)
            await status.delete()
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: %s", e)
            await status.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
    except yt_dlp.utils.DownloadError:
        await status.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ.")
    except Exception as e:
        log.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        await status.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    finally:
        shutil.rmtree(tmpdir, ignore_errors=True)

if __name__ == "__main__":
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)

import os
import re
import shutil
import asyncio
import logging
import tempfile
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import MessageNotModified
from dotenv import load_dotenv
import yt_dlp

# -------------------- CONFIG --------------------
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TOKEN")
OWNER = os.getenv("OWNER")
DOWNLOAD_DIR = Path(os.getenv("DOWNLOAD_DIR", "/tmp"))
MAX_FILE_MB = int(os.getenv("MAX_FILE_MB", "200"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("TOKEN is not set. Please provide Telegram bot token via env.")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
log = logging.getLogger("ytdlbot")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

URL_RE = re.compile(r"https?://\S+")

# -------------------- HELPERS --------------------
def human_size(num_bytes: int) -> str:
    step = 1024.0
    units = ["B", "KB", "MB", "GB"]
    size = float(num_bytes)
    for u in units:
        if size < step or u == units[-1]:
            return f"{size:.2f} {u}"
        size /= step
    return f"{size:.2f} GB"

def sanitize(text: str) -> str:
    text = re.sub(r"[^\w\s.-]", "", text).strip()
    return text[:80] if text else "file"

def build_ydl_opts(tmpdir: Path, mode: str) -> dict:
    outtmpl = str(tmpdir / "%(title).80s.%(ext)s")
    opts = {
        "outtmpl": outtmpl,
        "restrictfilenames": True,
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "ignoreerrors": True,
        "format": "bv*+ba/b" if mode == "video" else "bestaudio/best",
        "postprocessors": [],
    }
    # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∞—É–¥–∏–æ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ mp3
    if mode == "audio":
        opts["postprocessors"].append({
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        })
    return opts

def pick_file_from_dir(d: Path) -> Optional[Path]:
    for p in d.iterdir():
        if p.is_file() and not p.name.endswith(".part"):
            return p
    return None

# -------------------- COMMANDS --------------------
@dp.message_handler(commands=["start", "help"])
async def cmd_help(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –ø–æ —Å—Å—ã–ª–∫–µ —Å YouTube –∏ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–∫–∞—á–∞—Ç—å ‚Äî üé• –í–∏–¥–µ–æ –∏–ª–∏ üéµ –ê—É–¥–∏–æ\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª\n\n"
        f"‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ~{MAX_FILE_MB} MB\n"
        "‚Ä¢ –ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è\n"
    )
    await message.reply(text)

# -------------------- URL HANDLER --------------------
@dp.message_handler(regexp=URL_RE.pattern)
async def handle_url(message: types.Message):
    url_match = URL_RE.search(message.text or "")
    if not url_match:
        return
    url = url_match.group(0)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data=f"download_video|{url}"),
        types.InlineKeyboardButton("üéµ –ê—É–¥–∏–æ", callback_data=f"download_audio|{url}")
    )
    await message.reply("–ß—Ç–æ —Å–∫–∞—á–∞—Ç—å?", reply_markup=keyboard)

# -------------------- CALLBACK HANDLER --------------------
@dp.callback_query_handler(lambda c: c.data.startswith("download_"))
async def process_download(call: types.CallbackQuery):
    await call.answer()
    mode, url = call.data.split("|", 1)
    mode = mode.replace("download_", "")

    status = await call.message.reply("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    tmpdir = Path(tempfile.mkdtemp(prefix="ytdl_", dir=str(DOWNLOAD_DIR)))

    try:
        ydl_opts = build_ydl_opts(tmpdir, mode)
        log.info("Downloading %s -> %s", url, tmpdir)
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.extract_info(url, download=True)

        file_path = pick_file_from_dir(tmpdir)
        if not file_path or not file_path.exists():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")

        size_mb = file_path.stat().st_size / (1024 * 1024)
        caption = f"{sanitize(file_path.stem)} ‚Äî {human_size(file_path.stat().st_size)}"

        if size_mb > MAX_FILE_MB:
            await status.edit_text(
                f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({human_size(file_path.stat().st_size)}).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞–ø—Ä—è–º—É—é."
            )
            return

        ext = file_path.suffix.lower().lstrip(".")
        try:
            if ext in {"mp4", "mkv", "webm", "mov"}:
                await call.message.reply_video(open(file_path, "rb"), caption=caption)
            elif ext in {"mp3", "m4a", "aac", "flac", "wav", "ogg"}:
                await call.message.reply_audio(open(file_path, "rb"), caption=caption)
            else:
                await call.message.reply_document(open(file_path, "rb"), caption=caption)
            await status.delete()
        except Exception as e:
            log.exception("Send failed: %s", e)
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
    except yt_dlp.utils.DownloadError:
        try:
            await status.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ.")
        except MessageNotModified:
            pass
    except Exception as e:
        log.exception("Unexpected error: %s", e)
        try:
            await status.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        except MessageNotModified:
            pass
    finally:
        shutil.rmtree(tmpdir, ignore_errors=True)

# -------------------- RUN --------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
